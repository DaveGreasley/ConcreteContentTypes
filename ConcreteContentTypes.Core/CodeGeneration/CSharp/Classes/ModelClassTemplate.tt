<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ConcreteContentTypes.Core.Models" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Umbraco.Core.Models;
using Umbraco.Web;
using System.Web;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using ConcreteContentTypes.Core.Models;
using ConcreteContentTypes.Core.Interfaces;
using Newtonsoft.Json;

<# foreach(string nameSpace in UsingNamespaces) { #>
using <#= nameSpace #>;
<# } #>

// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by ConcreteContentTypes.
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------


namespace <#= Definition.Namespace #>
{
	<# foreach (var attribute in Definition.Attributes) { #> <#= AttributeTemplate.TransformText(attribute) #> <# } #>
	public partial class <#= Definition.Name #> : <#= Definition.BaseClass #><<#= Definition.ChildType #>>
	{
		public <#= Definition.Name #>()
			: base()
		{ }

		public <#= Definition.Name #>(string name, ConcreteModel parent)
			: this(name, parent.Id)
		{ }
		
		public <#= Definition.Name #>(string name, int parentId)
			: base(name, parentId)
		{ }

		public <#= Definition.Name #>(int contentId, bool getPropertiesRecursively = false)
			: base(contentId, getPropertiesRecursively)
		{ }

		public <#=Definition.Name#>(IPublishedContent content, bool getPropertiesRecursively = false)
			: base(content, getPropertiesRecursively)
		{ }
	}

	<# foreach (var attribute in Definition.Attributes) { #> <#= AttributeTemplate.TransformText(attribute) #> <# } #>
	public partial class <#= Definition.Name #> : <#= Definition.BaseClass #>
	{
		public override string ContentTypeAlias { get { return "<#= Definition.Name #>"; } }

		<# foreach(var p in Definition.Properties) { #>	<#= WriteProperty(p) #> <# } #>

		public <#= Definition.Name #>()
			: base()
		{
		}

		public <#= Definition.Name #>(string name, ConcreteModel parent)
			: this(name, parent.Id)
		{
		}

		public <#= Definition.Name #>(string name, int parentId)
			: base()
		{
			this.Name = name;
			this.ParentId = parentId;
		}

		public <#= Definition.Name #>(int contentId, bool getPropertiesRecursively = false)
			: base(contentId, getPropertiesRecursively)
		{
		}

		public <#=Definition.Name#>(IPublishedContent content, bool getPropertiesRecursively = false)
			: base(content, getPropertiesRecursively)
		{
		}
	}
}


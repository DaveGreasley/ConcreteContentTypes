<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="ConcreteContentTypes.Core.Models" #>
<#@ import namespace="ConcreteContentTypes.Core.ModelGeneration.CSharpWriters.PropertyCSharpWriters" #>
<#@ output extension=".cs" #>

using System;
using System.Collections.Generic;
using Umbraco.Core.Models;
using Umbraco.Web;
using System.Web;
using System.Linq;
using System.ComponentModel.DataAnnotations;
using ConcreteContentTypes.Core.Models;
using ConcreteContentTypes.Core.Interfaces;
using Newtonsoft.Json;

<# foreach(string nameSpace in _usingNamespaces) { #>
using <#= nameSpace #>;
<# } #>


namespace <#= _classDefinition.Namespace #>
{
	<# foreach (var attributeWriter in _attributeWriters) { #> <#=attributeWriter.WriteAttribute()#> <# } #>
	public partial class <#= _classDefinition.Name #> : <#= _classDefinition.BaseClass #>
	{
		public override string ContentTypeAlias { get { return "<#= _classDefinition.Name #>"; } }

		<# foreach(PropertyCSharpWriterBase p in _propertyWriters) { #>
		
		<#=p.GetPropertyDefinition()#> <# } #>

		<#= _children #>

		public <#= _classDefinition.Name #>()
			: base()
		{
		}

		public <#= _classDefinition.Name #>(string name, IConcreteModel parent)
			: this(name, parent.Id)
		{
		}

		public <#= _classDefinition.Name #>(string name, int parentId)
			: base()
		{
			this.Name = name;
			this.ParentId = parentId;
		}

		public <#= _classDefinition.Name #>(int contentId, bool getPropertiesRecursively = false)
			: base(contentId, getPropertiesRecursively)
		{
		}

		public <#=_classDefinition.Name#>(IPublishedContent content, bool getPropertiesRecursively = false)
			: base(content, getPropertiesRecursively)
		{
		}

		public override void Init(IPublishedContent content)
		{
			base.Init(content);
			<# foreach(PropertyCSharpWriterBase p in _propertyWriters) {
				if (!string.IsNullOrEmpty(p.GetValueString())) { #>
			
			<#=p.GetValueString()#>
			<# } } #>

		}

	}
}

